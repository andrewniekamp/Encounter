@{
    ViewData["Title"] = "Encounter";
    Layout = "~/Views/Shared/_GameLayout.cshtml";
}
@using Encounter.Entities
@model Encounter.ViewModels.GamePageViewModel

<div id="black-bg">
    <div id="fade-container">
        @*event-board-img outside of normal flow (position: absolute)*@
        <img class="event-board-img" src="@Model.CurrentEvent.ImageUrl" alt="@Model.CurrentEvent.Name" />
        <div id="next-event">
            @using (Html.BeginForm("Next", "Game", new
            {
                gameId = Model.Game.GameId,
                eventsCompleted = Model.EventsCompleted + 1
            }))
            {
                <div>
                    @if (Model.LastEvent == true)
                    {
                        <input class="btn btn-default game-overlay-btn" type="submit" value="You Win!" />
                    }
                    else
                    {
                        <input class="btn btn-default game-overlay-btn" type="submit" value="Next Event!" />
                    }
                </div>
            }
        </div>
        <div id="count-down-box">
            <h1 id="start-banner">Game Starting: <span id="count-down">3</span></h1>
            <button id="start-btn" class="btn btn-danger game-overlay-btn">Start</button>
        </div>
        <div id="paused">
            <h1>Game Paused</h1>
            <button class="pause btn btn-danger game-overlay-btn">Unpause</button>
        </div>
        <div class="event-container container-fluid">
            <div class="heal"></div>
            <div class="row">
                <div class="top-buttons-container">
                    <button class="pause btn btn-danger">Pause</button><button class="status btn btn-info">Status</button>
                </div>
            </div>
            <div id="health-bar-row" class="row">
                <div class="col-xs-6">
                    @*HEALTH BARS TO UPDATE WITH AJAX*@
                    <div class="progress">
                        <div id="char-bar" class="progress-bar progress-bar-success" role="progressbar">
                            <span id="char-health-amt">@Model.Game.Character.Health</span>
                        </div>
                    </div>
                    <p class="name-tag">@Model.Game.Character.Name</p>
                </div>
                <div class="col-xs-6">
                    <div class="progress">
                        <div id="foe-bar" class="progress-bar progress-bar-success" role="progressbar">
                            <span id="foe-health-amt">@Model.CurrentEvent.Foe.Health</span>
                        </div>
                    </div>
                    <p class="name-tag">@Model.CurrentEvent.Foe.Name</p>
                </div>
            </div>
            <div class="row play-area center-box">
                <div class="row action-row">
                    <div class="char-skill-box col-xs-6 col-md-4">
                        <button class="btn act-btn" value="@Model.Game.Character.Ability1.AbilityId" style="background-image: url(@Model.Game.Character.Ability1.ImageUrl);">
                            <div class="progress cooldown-box">
                                <div class="progress-bar cooldown-bar" role="progressbar" aria-valuenow="70"
                                     aria-valuemin="0" aria-valuemax="100">
                                    <span class="sr-only">100% Complete</span>
                                </div>
                            </div>
                        </button>
                        <button class="btn act-btn" value="@Model.Game.Character.Ability2.AbilityId" style="background-image: url(@Model.Game.Character.Ability2.ImageUrl);">
                            <div class="progress cooldown-box">
                                <div class="progress-bar cooldown-bar" role="progressbar" aria-valuenow="70"
                                     aria-valuemin="0" aria-valuemax="100">
                                    <span class="sr-only">100% Complete</span>
                                </div>
                            </div>
                        </button>
                    </div>
                    <div class="col-xs-0 col-md-4"></div>
                    <div class="center-box col-xs-6 col-md-4">
                    </div>
                </div>
            </div>
            <div class="sprite-row row">
                <div class="char-box col-xs-6 col-md-4 col-lg-3">
                    <div class="row center-box char-sprite-box">
                        <div id="char-sprite-effect-box">
                            @*TEMPORARY - DO WITHIN AJAX*@
                        </div>
                        <img class="game-char-img" src="@Model.Game.Character.SpriteUrl" alt="@Model.Game.Character.Name" />
                    </div>
                </div>
                <div class="col-xs-0 col-md-4 col-lg-6"></div>
                <div class="foe-box col-xs-6 col-md-4 col-lg-3">
                    <div class="row">

                    </div>
                    <div class="row center-box foe-sprite-box">
                        <div id="foe-sprite-effect-box">
                            @*TEMPORARY - DO WITHIN AJAX*@
                        </div>
                        <img class="game-foe-img" src="@Model.CurrentEvent.Foe.SpriteUrl" alt="@Model.CurrentEvent.Foe.Name" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {

        $('#start-btn').hide();
        $('#next-event').hide();
        $('#you-lose').hide();
        $('#paused').hide();
        $('#char-sprite-effect-box').hide();
        $(".cooldown-box").hide();

        var playerHealth = @Model.Game.Character.Health;
        var foeHealth = @Model.CurrentEvent.Foe.Health;
        var gameActive = false;
        var paused = false;
        var player = "char";
        var foe = "foe";
        var countDownCount = 2;

        countDown(countDownCount);

        $("#start-btn").click(function() {
            gameActive = true;
            $("#count-down-box").fadeOut();
        })

        $(".pause").click(function() {
            paused = pressPause(gameActive, paused);
        })

        //Checks for a winner
        function winCheck(foeHealth, playerHealth) {
            if (foeHealth <= 0) {
                setTimeout(function () {
                    $('#next-event').fadeIn();
                }, 500);
                console.log("Foe has died!");
                return false;
            }
            if (playerHealth <= 0) {
                $("#fade-container").fadeOut();
                setTimeout(function () {
                    window.location.href = '@Url.Action("GameOver", "Game")';
                }, 1000);
                console.log("You have died!");
                return false;
            }
            return true;
        }

        //Player action
        $('.act-btn').click(function () {
            if (paused == false) {
                var val = parseInt($(this).val());

                var btn = $(this);
                var cooldownBox = $(".cooldown-box", this);
                var cooldownBar = cooldownBox.children(":first");
                cooldownBox.show();
                btn.prop('disabled',true);

                $.ajax({
                    type: 'GET',
                    data: { id: val },
                    dataType: 'json',
                    contentType: 'application/json',
                    url: '@Url.Action("Act", "Game")',
                    success: function (result) {
                        var cooldown = result.coolDownMiliSecs;
                        var cooldownSecs = cooldown / 1000;

                        cooldownBar.css({
                            WebkitTransition : 'width ' + cooldownSecs + 's linear',
                            MsTransition     : 'width ' + cooldownSecs + 's linear',
                            transition       : 'width ' + cooldownSecs + 's linear'
                        });
                        cooldownBar.css("width", "0%");

                        move(player);
                        window.setTimeout(function(){
                            btn.prop('disabled',false);
                            cooldownBox.hide();
                            cooldownBar.css("width", "100%");
                        }, cooldown);

                        setEffects(true, result);
                        //Running health based on action
                        playerHealth -= result.charHarm;
                        playerHealth += result.charHeal;
                        foeHealth -= result.foeHarm;
                        foeHealth += result.foeHeal;
                        playerPercent = playerHealth / @Model.Game.Character.Health * 100;
                        foePercent = foeHealth / @Model.CurrentEvent.Foe.Health * 100;

                        $("#char-health-amt").text(playerHealth);
                        $("#foe-health-amt").text(foeHealth);
                        $("#char-bar").css("width", playerPercent + "%");
                        $("#foe-bar").css("width", foePercent + "%");
                        gameActive = winCheck(foeHealth, playerHealth);
                    }
                });
            }
        });

        //Foe action
        setInterval(function(){
            if(gameActive && paused == false) {
                var coinFlip = chooseAction(1, 2);
                var val = 0;

                if (coinFlip == 1) {
                    val = @Model.CurrentEvent.Foe.Ability1.AbilityId;
                    console.log(val);
                } else {
                    val = @Model.CurrentEvent.Foe.Ability2.AbilityId;
                    console.log(val);
                }

                $.ajax({
                    type: 'GET',
                    data: { id: val },
                    dataType: 'json',
                    contentType: 'application/json',
                    url: '@Url.Action("FoeAct", "Game")',
                    success: function (result) {
                        move(foe);

                        setEffects(false, result);
                        //Running health based on action
                        playerHealth -= result.foeHarm;
                        playerHealth += result.foeHeal;
                        foeHealth -= result.charHarm;
                        foeHealth += result.charHeal;
                        playerPercent = playerHealth / @Model.Game.Character.Health * 100;
                        foePercent = foeHealth / @Model.CurrentEvent.Foe.Health * 100;

                        $("#char-health-amt").text(playerHealth);
                        $("#foe-health-amt").text(foeHealth);
                        $("#char-bar").css("width", playerPercent + "%");
                        $("#foe-bar").css("width", foePercent + "%");
                        gameActive = winCheck(foeHealth, playerHealth);
                    }
                });

            }

        }, 2000);
    });
</script>
